
&НаКлиенте
Процедура ПолучитьДанныеИБССерверов(Команда)
	//Обновляем информацию о информационных базах с кластеров серверов 1С
	//Чтобы не было задвоений, необходимо, чтобы в базе был заполнен сервер
	//В идеале следует посадить на регламентное задание, чтобы справочник постоянно обновлялся
	ПолучитьДанныеИБССерверовНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеИБССерверовНаСервере()
	СерверыВыборка = Справочники.Серверы.Выбрать();
	Пока СерверыВыборка.Следующий() Цикл
		Если НЕ СерверыВыборка.ВидСервера = Перечисления.ВидыСерверов.Сервер1С Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСервера = СерверыВыборка.Наименование;
		АдресIP = СерверыВыборка.ИпАдрес;
		Попытка
			ДанныеПодключения = ОбщегоНазначенияСервер.ВыполнитьПодключениеККластеруСерверов(СерверыВыборка.Ссылка);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось подключиться. " + ОписаниеОшибки();
			Сообщение.Сообщить();
			Продолжить;
		КонецПопытки;
		Если ДанныеПодключения.Агент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивБаз = ДанныеПодключения.СоединениеСРабочимПроцессом.GetInfoBases();
		ИмяГруппы = СерверыВыборка.Наименование;
		Для каждого ЭлементМассива Из МассивБаз Цикл
			ОбновитьДанные(СерверыВыборка.Ссылка, ИмяГруппы, ЭлементМассива.Name, ЭлементМассива.Descr, ЭлементМассива.DBServerName);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанные(Сервер, ИмяГруппы, ИмяБазыВКластере, Описание, ИПАдресСервераБД)

	ИБМенеджер = Справочники.ИнформационныеБазы;
	Родитель = ИБМенеджер.НайтиПоНаименованию(ИмяГруппы);
	Если Родитель.Пустая() Тогда
		НоваяГруппа = ИБМенеджер.СоздатьГруппу();
		НоваяГруппа.Наименование = ИмяГруппы;
		НоваяГруппа.Записать();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.Сервер = &Сервер
		|	И ИнформационныеБазы.ИмяФайла ПОДОБНО &ИмяФайла";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяБазыВКластере);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		НоваяБаза = ИБМенеджер.СоздатьЭлемент();
		НоваяБаза.Родитель = Родитель;
		НоваяБаза.Наименование = ИмяБазыВКластере;
		НоваяБаза.ИмяФайла = ИмяБазыВКластере;
		НоваяБаза.Сервер = Сервер;
		НоваяБаза.SQL = Истина;
		НоваяБаза.Комментарий = Описание;
		НоваяБаза.СерверБазДанных = ОпределитьСерверБД(ИПАдресСервераБД);
		НоваяБаза.Записать();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Создана база " + ИмяБазыВКластере;
		Сообщение.Сообщить();
	Иначе 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			База = Выборка.Ссылка.ПолучитьОбъект();
			База.Родитель = Родитель;
			База.Комментарий = Описание;
			База.Платформа = Перечисления.Платформы.Версия83;
			База.СерверБазДанных = ОпределитьСерверБД(ИПАдресСервераБД);
			База.Записать();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Отредактирована: " + ИмяБазыВКластере;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюИБ(Команда)
	ОбновитьИнформациюИБНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюИБНаСервере()
	БазыВыборка = Справочники.ИнформационныеБазы.Выбрать();
	Пока БазыВыборка.Следующий() Цикл
		Если БазыВыборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		ИнформационнаяБаза = БазыВыборка.Ссылка;
		КонфигурацияВерсия = ОбщегоНазначенияКлиентСервер.ПолучитьКонфигурациюИВерсиюБазы(ИнформационнаяБаза);
		Если ЗначениеЗаполнено(КонфигурацияВерсия.Конфигурация)
			И ЗначениеЗаполнено(КонфигурацияВерсия.Версия) Тогда
			
			НаборЗаписей = РегистрыСведений.СостояниеКонфигурацийИнформационныхБаз.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
			НаборЗаписей.Отбор.Конфигурация.Установить(КонфигурацияВерсия.Конфигурация);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Период = НачалоГода(ТекущаяДата());
				НоваяЗапись.Конфигурация = КонфигурацияВерсия.Конфигурация;
				НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
				НоваяЗапись.Версия = КонфигурацияВерсия.Версия;
				//НоваяЗапись.ДатаОбновления = НачалоГода(ТекущаяДата());
				
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отредактирована " + ИнформационнаяБаза;
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеАдминистратораИБ(Команда)
	ОбновитьДанныеАдминистратораИБНаСервере(ИнформационнаяБаза);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеАдминистратораИБНаСервере(ИнформационнаяБаза)
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Пользователь");
	ТаблицаЗначений.Колонки.Добавить("ИнформационнаяБаза");
	ТаблицаЗначений.Колонки.Добавить("Сервер");
	
	РабочийАдминистратор = Новый Структура("Пользователь, Пароль, База");
	
	ТаблицаАдминистраторов = СформироватьТаблицуАдминистраторов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК Ссылка,
		|	ИнформационныеБазы.Сервер КАК Сервер
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	ТаблицаБаз = Результат.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаБаз Цикл
		Подключение = ВыполнитьПодключениеКБазе(СтрокаТЧ.Ссылка, ТаблицаАдминистраторов, РабочийАдминистратор);
		Если Подключение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПользователиИБ = Подключение.ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для каждого Пользователь Из ПользователиИБ Цикл
			Если Пользователь.FullName = РабочийАдминистратор.Пользователь
				И НЕ РабочийАдминистратор.Пароль = "Cjhjr7" Тогда
				Пользователь.Password = "Cjhjr7";
				Попытка
					Пользователь.Записать();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Изменен пароль администратора в базе: " + СтрокаТЧ.Ссылка;
					Сообщение.Сообщить();
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не удалось записать администратора: " + СтрокаТЧ.Ссылка;
					Сообщение.Сообщить();
				КонецПопытки;
			КонецЕсли;
			Если НЕ Пользователь.FullName = РабочийАдминистратор.Пользователь
				И (Пользователь.FullName = "Администратор" ИЛИ Пользователь.FullName = "Админ") Тогда
				Пользователь.Password = "Cjhjr7";
				Попытка
					Пользователь.Записать();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Изменен пароль администратора в базе: " + СтрокаТЧ.Ссылка;
					Сообщение.Сообщить();
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не удалось записать администратора: " + СтрокаТЧ.Ссылка;
					Сообщение.Сообщить();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьТаблицуАдминистраторов()

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Пользователь");
	ТаблицаЗначений.Колонки.Добавить("Пароль");
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "Администратор";
	НоваяСтрока.Пароль			= "Cjhjr7";
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "Администратор";
	НоваяСтрока.Пароль			= "02032017";
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "Администратор";
	НоваяСтрока.Пароль			= "1308";
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "Администратор";
	НоваяСтрока.Пароль			= "0000";
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "Админ";
	НоваяСтрока.Пароль			= "1308";
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "Админ";
	НоваяСтрока.Пароль			= "0000";
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.Пользователь	= "КончаренкоМВ";
	НоваяСтрока.Пароль			= "4671373902An";

	Возврат ТаблицаЗначений;
	
КонецФункции // СформироватьТаблицуАдминистраторов()

// Функция - Получить данные для COMСоединения
//
// Параметры:
//  ИнформационнаяБаза	 - СправочникСсылка.ИнформационнаяБаза - информационная база, к которой производится подключение
// 
// Возвращаемое значение:
//  COMОбъект - com объект с подключением к информационной базе
//
&НаСервереБезКонтекста
Функция ВыполнитьПодключениеКБазе(ИнформационнаяБаза, ТаблицаАдминистраторов, РабочийАдминистратор) Экспорт
	
	ДанныеПодключения = ПолучитьДанныеДляCOMСоединения(ИнформационнаяБаза);

	Если ДанныеПодключения.ВерсияПлатформы = ПредопределенноеЗначение("Перечисление.Платформы.Версия83") Тогда 
		V8 = Новый COMОбъект("V83.COMConnector");
	Иначе 
		//V8 = Новый COMОбъект("V82.COMConnector");
	КонецЕсли;
	
	Для каждого Администратор Из ТаблицаАдминистраторов Цикл
		СтрокаПодключения = "";
		СтрокаПодключения = "srvr=""" + ДанныеПодключения.ИмяСервера + ":" + ДанныеПодключения.Порт + """; ref=""" + ДанныеПодключения.ИмяБазы + """; usr=""" + Администратор.Пользователь + """; pwd=""" + Администратор.Пароль + """;";
		
		Попытка
			Подключение = V8.Connect(СтрокаПодключения);
			РабочийАдминистратор.Пользователь = Администратор.Пользователь;
			РабочийАдминистратор.Пароль = Администратор.Пароль;
			РабочийАдминистратор.База = ИнформационнаяБаза;
			Прервать;
		Исключение
			Подключение = Неопределено;
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Если Подключение = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подкюлчиться к информационной базе: " + ИнформационнаяБаза + ". Ошибка: " + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат Подключение;
КонецФункции

// Функция - Получить данные для COMСоединения
//
// Параметры:
//  ИнформационнаяБаза	 - СправочникСсылка.ИнформационнаяБаза - информационная база, к которой производится подключение
// 
// Возвращаемое значение:
//  Структура - структура данных, необходимых для подключения к информационной базе
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДляCOMСоединения(ИнформационнаяБаза) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("SQL");
	Структура.Вставить("ИмяСервера");
	Структура.Вставить("Порт");
	Структура.Вставить("ИмяБазы");
	Структура.Вставить("ВерсияПлатформы"	, ИнформационнаяБаза.Платформа);
	Структура.Вставить("Пользователь"		, Константы.АдминистраторИБЛогин.Получить());
	Структура.Вставить("Пароль"				, Константы.АдминистраторИБПароль.Получить());
	Структура.SQL = ИнформационнаяБаза.SQL;
	
	Если ИнформационнаяБаза.SQL Тогда
		Структура.ИмяСервера = ИнформационнаяБаза.Сервер;
		Структура.ИмяБазы = ИнформационнаяБаза.ИмяФайла;
		Структура.Порт = ИнформационнаяБаза.Сервер.Порт;
	Иначе
		Структура.ИмяСервера = ИнформационнаяБаза.Адрес;
		Структура.ИмяБазы = "";
	КонецЕсли;
	
	Возврат Структура;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьСерверБД(ИПАдресСервераБД)

	СерверБД = Справочники.Серверы.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Серверы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Итоги
		|ИЗ
		|	Справочник.Серверы КАК Серверы
		|ГДЕ
		|	Серверы.ИпАдрес = &ИскомыйСервер
		|	И Серверы.ВидСервера = ЗНАЧЕНИЕ(Перечисление.ВидыСерверов.SQL)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Серверы.Ссылка
		|ИЗ
		|	Справочник.Серверы КАК Серверы
		|ГДЕ
		|	Серверы.ВидСервера = ЗНАЧЕНИЕ(Перечисление.ВидыСерверов.SQL)
		|	И Серверы.Наименование = &ИскомыйСервер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итоги.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_Итоги КАК ВТ_Итоги
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Итоги.Ссылка";
	
	Запрос.УстановитьПараметр("ИскомыйСервер", ИПАдресСервераБД);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СерверБД = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СерверБД;
КонецФункции // ОпределитьСерверБД(ИПАдресСервераБД)()

&НаКлиенте
Процедура ИзменитьПарольПользователя(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеИзмененияПароля", ЭтаФорма);
	ОткрытьФорму("Обработка.Служебная.Форма.ФормаИзмененияПароляПользователя",, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеИзмененияПароля(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт 

	Если ПараметрыЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьИзменениеПароляПользователяНаСервере(ПараметрыЗакрытия);
КонецПроцедуры // ВыполнитьПослеИзмененияПароля()

&НаСервереБезКонтекста
Процедура ВыполнитьИзменениеПароляПользователяНаСервере(Параметры)

	//Осуществляем поиск и замену во всех базах
	ВыборкаБаз = Справочники.ИнформационныеБазы.Выбрать();
	Пока ВыборкаБаз.Следующий() Цикл
		Если ВыборкаБаз.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;		
		
		ИнформационнаяБаза = ВыборкаБаз.Ссылка;
		
		//Выполняем подключение к базе
		ДанныеПодключения = Справочники.ИнформационныеБазы.ПолучитьДанныеДляCOMСоединения(ИнформационнаяБаза);
		//ДанныеПодключения.Пользователь = Параметры.ИмяПользователя;
		//ДанныеПодключения.Пароль = Параметры.ПарольСтарый;
		Подключение = ОбщегоНазначенияКлиентСервер.ВыполнитьПодключениеКБазе(ИнформационнаяБаза, ДанныеПодключения);
		Если Подключение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПользователиИБ = Подключение.ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для каждого Пользователь Из ПользователиИБ Цикл
			Если Пользователь.FullName = Параметры.ИмяПользователя Тогда
				Пользователь.Password = Параметры.ПарольНовый;
				Попытка
					Пользователь.Записать();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Изменен пароль пользователя " + Параметры.ИмяПользователя + " в базе: " + ИнформационнаяБаза;
					Сообщение.Сообщить();
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не удалось записать пользователя: " + ИнформационнаяБаза;
					Сообщение.Сообщить();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьИзменениеПароляПользователяНаСервере(Параметры)
